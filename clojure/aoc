#!/usr/bin/env bb
;;;; A lot of the code and commentary in this file was built with code
;;;; assistance from TabNine (tabnine.com).

(require '[babashka.cli :as cli])
(require '[babashka.fs :as fs])

(defn validate-day?
  "Validate AOC Day parameter"
  [val]
  (and
   (pos? val)
   (<= val 25)))

(defn validate-star?
  "Validate AOC Star parameter"
  [val]
  (or
   (= val 1)
   (= val 2)))

(def cli-spec
  {:year {:desc "Advent of Code Year (2015-)"
          :require true}
   :day {:desc "Advent of Code Day (1-25)"
         :validate validate-day?
         :require true}
   :star {:desc "Advent of Code Star (1-2)"
          :validate validate-star?
          :require true}})

(defn usage
  "Usage summary"
  [_]
  (println
   (str "run\n" (cli/format-opts {:spec cli-spec}))))

(defn year-day-file-exists?
  "Does file exist for requested AOC Year/Day?"
  [year day]
  (let [filename (format "./src/aoc/year%d/day%02d.clj" year day)]
    (fs/exists? filename)))

(defn unwritten-star-error
  "Print error message about undefined star function and exit."
  [year day star]
  ;; Temporarily remap standard error to standard out.
  (binding [*out* *err*]
    (println (format "ERROR: We haven't defined a solution for Year %d, Day %d, Star %d.

  Please define a 0-arity function defined as aoc.year%d.day%02d/star%d"
                     year day star year day star))))

(defn load-and-run
  "This function takes three integer arguments: 'year', 'day', and 'star'.

  It constructs a namespace/function name by joining them with hyphens and
  checks if the function exists in the corresponding namespace.  If the function
  exists, it evaluates and returns the result.  If the function does not exist,
  it throws an error."
  [year day star]
  ;; Generate symbols based on the provided year/day/star integer inputs
  (let [namespace-symbol (symbol (str "aoc.year" year ".day" (format "%02d"
                                                                     day)))
        function-name (case star
                        1 'star1
                        2 'star2)
        resolve-fn (do
                     (require namespace-symbol)
                     (ns-resolve namespace-symbol function-name))]
    (if resolve-fn
      ;; Call function if it exists
      (resolve-fn)
      ;; Error out if function doesn't exist.
      (unwritten-star-error year day star))))

(defn run
  "Run the logic that gets us the answer for our specified AOC Star"
  [{:keys [opts]}]
  (let [{:keys [year day star]} opts]
    (if (year-day-file-exists? year day)
      (println (load-and-run year day star))
      (println (format "ERROR: File doesn't exist for Year %d Day %d" year day)))))

(def command-table
  [{:cmds ["run"] :fn run :spec cli-spec}
   {:cmds [] :fn usage}])

;; By putting our entry point into -main, we allow REPL to call out function
;; If Babaskha's "babashka.file" property matches *file*, we know that we've
;; run this file from the shell, so invoke main.
;;
;; This is similar to Python's "if __name__ == "__main__" logic.
(when (= *file* (System/getProperty "babashka.file"))
  (cli/dispatch command-table *command-line-args*))
