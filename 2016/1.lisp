(ql:quickload "cl-utilities")

(defparameter input-txt "L1, L3, L5, L3, R1, L4, L5, R1, R3, L5, R1, L3, L2, L3, R2, R2, L3, L3, R1, L2, R1, L3, L2, R4, R2, L5, R4, L5, R4, L2, R3, L2, R4, R1, L5, L4, R1, L2, R3, R1, R2, L4, R1, L2, R3, L2, L3, R5, L192, R4, L5, R4, L1, R4, L4, R2, L5, R45, L2, L5, R4, R5, L3, R5, R77, R2, R5, L5, R1, R4, L4, L4, R2, L4, L1, R191, R1, L1, L2, L2, L4, L3, R1, L3, R1, R5, R3, L1, L4, L2, L3, L1, L1, R5, L4, R1, L3, R1, L2, R1, R4, R5, L4, L2, R4, R5, L1, L2, R3, L4, R2, R2, R3, L2, L3, L5, R3, R1, L4, L3, R4, R2, R2, R2, R1, L4, R4, R1, R2, R1, L2, L2, R4, L1, L2, R3, L3, L5, L4, R4, L3, L1, L5, L3, L5, R5, L5, L4, L2, R1, L2, L4, L2, L4, L1, R4, R4, R5, R1, L4, R2, L4, L2, L4, R2, L4, L1, L2, R1, R4, R3, R2, R2, R5, L1, L2")
(defparameter input-txt1 "R8, R4, R4, R8")
(defun split (input)
  (mapcar (lambda (str) (string-trim " " str))
			    (cl-utilities:split-sequence #\, input)))

(defun left (dir)
  (cond ((eql dir #\N) #\W)
	((eql dir #\E) #\N)
	((eql dir #\W) #\S)
	((eql dir #\S) #\E)))

(defun right (dir)
  (cond ((eql dir #\N) #\E)
	((eql dir #\E) #\S)
	((eql dir #\W) #\N)
	((eql dir #\S) #\W)))

(defun dir-2d (dir)
  (cond ((eql dir #\N) (cons 0 1))
	((eql dir #\E) (cons 1 0))
	((eql dir #\W) (cons -1 0))
	((eql dir #\S) (cons 0 -1))))

(defun translate-action (str)
  (let ((dir (char str 0))
	(magnitude (parse-integer (subseq str 1))))
    (cons dir magnitude)))

(defparameter *hash* (make-hash-table :test 'equal))

(defun move0 (prev action)
  ; (declare (special visited-twice))
  (let* ((actiont (translate-action action))
	 (old-dir (caar prev))
	 (old-loc (cadar prev))
	 (visited-twice (cddar prev))
	 (new-dir (cond ((eql (car actiont) #\L) (left old-dir))
			(t (right old-dir))))
	 (new-dir-2d (dir-2d new-dir))
	 (new-dir-2d-magnitude (cons (* (cdr actiont) (car new-dir-2d))
				     (* (cdr actiont) (cdr new-dir-2d))))
	 (visited (loop for n from 1 upto (cdr actiont) by 1
		     collect (cons (+ (car old-loc) (* (car new-dir-2d) n))
				   (+ (cdr old-loc) (* (cdr new-dir-2d) n)))))
	 (new-loc (cons (+ (car old-loc) (car new-dir-2d-magnitude))
			(+ (cdr old-loc) (cdr new-dir-2d-magnitude)))))
    (when (null visited-twice)
      (dolist (x visited)
	(let ((val (gethash x *hash* nil)))
	  (if (null val)
	      (setf (gethash x *hash*) t)
	      (setq visited-twice x)))))
    (cons (cons new-dir (cons new-loc visited-twice)) prev)))

(defun q1 (input)
  (progn
    (clrhash *hash*)
    (let* ((moves (reduce #'move0 (split input) :initial-value (list '(#\N . ((0 . 0) . nil)))))
	   (final-pos (cadar moves))
	   (manhattan-dist (+ (abs (car final-pos)) (abs (cdr final-pos)))))
	   (manhattan-first-repeat (+ (abs (caddar moves)) (abs (cdddar moves)))))
      (values manhattan-dist manhattan-first-repeat)))
